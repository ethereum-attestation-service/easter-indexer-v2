generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Schema {
  id           String        @id
  schema       String
  creator      String
  resolver     String
  revocable    Boolean
  index        String
  txid         String
  time         Int
  attestations Attestation[]
}

model Attestation {
  id             String  @id
  data           String
  schema         Schema  @relation(fields: [schemaId], references: [id])
  recipient      String
  attester       String
  time           Int
  timeCreated    Int
  expirationTime Int
  revocationTime Int
  refUID         String
  revocable      Boolean
  revoked        Boolean
  txid           String
  schemaId       String
  ipfsHash       String
  isOffchain     Boolean
}

model EnsName {
  id        String @id @unique
  name      String
  timestamp Int
}

model ServiceStat {
  name  String @id
  value String
}

model User {
  id            String    @id @unique
  name          String
  ensName       String    @default("")
  authoredPosts Post[]    @relation("Author")
  receivedPosts Post[]    @relation("Recipient")
  likes         Like[]
  retweets      Retweet[]
  createdAt     Int
  followers     Follow[]  @relation("Followers")
  following     Follow[]  @relation("Following")
}

model Follow {
  id          String @id
  follower    User   @relation("Following", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("Followers", fields: [followingId], references: [id])
  followingId String
  createdAt   Int
  revokedAt   Int
}

model Retweet {
  id        String @id
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  post      Post   @relation(fields: [postId], references: [id])
  postId    String
  createdAt Int
  revokedAt Int
}

model Like {
  id        String @id
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  post      Post   @relation(fields: [postId], references: [id])
  postId    String
  createdAt Int
  revokedAt Int
}

model LinkPreview {
  id          String @id @default(cuid())
  postId      String @unique
  post        Post   @relation(fields: [postId], references: [id])
  url         String
  title       String
  image       String
  description String
  createdAt   Int
}

model Post {
  id          String       @id
  user        User         @relation("Author", fields: [userId], references: [id])
  userId      String
  recipient   User?        @relation("Recipient", fields: [recipientId], references: [id])
  recipientId String?
  content     String
  replies     Post[]       @relation("ReplyToPost")
  parent      Post?        @relation("ReplyToPost", fields: [parentId], references: [id])
  parentId    String?
  createdAt   Int
  revokedAt   Int
  likes       Like[]
  retweets    Retweet[]
  linkPreview LinkPreview?
}
